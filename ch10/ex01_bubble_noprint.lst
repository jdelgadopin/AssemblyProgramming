     1                                 %line 1+1 ex01_bubble_noprint.asm
     2                                 [section .data]
     3                                 
     4                                 [section .text]
     5                                 [global main]
     6                                 
     7                                 [extern rand]
     8                                 %line 6+0 ex01_bubble_noprint.asm
     9                                 [extern malloc]
    10                                 [extern atol]
    11                                 %line 7+1 ex01_bubble_noprint.asm
    12                                 
    13                                 
    14                                 
    15                                 create_data:
    16                                 
    17                                 
    18                                 .array equ 0
    19                                 .size equ 8
    20                                 .r12 equ 16
    21                                 .rbx equ 24
    22 00000000 55                      push rbp
    23 00000001 4889E5                  mov rbp, rsp
    24 00000004 4883EC20                sub rsp, 32
    25 00000008 48895C2418              mov [rsp+.rbx], rbx
    26 0000000D 4C89642410              mov [rsp+.r12], r12
    27 00000012 48897C2408              mov [rsp+.size], rdi
    28 00000017 48C1E702                shl rdi, 2
    29 0000001B E8(F6FFFFFF)            call malloc
    30 00000020 48890424                mov [rsp+.array], rax
    31 00000024 488B1C24                mov rbx, [rsp+.array]
    32 00000028 4D31E4                  xor r12, r12
    33                                 .for:
    34 0000002B 4C3B642408              cmp r12, [rsp+.size]
    35 00000030 7D19                    jge .end
    36 00000032 E8(F6FFFFFF)            call rand
    37 00000037 4831D2                  xor rdx, rdx
    38 0000003A 49C7C010270000          mov r8, 10000
    39 00000041 49F7F8                  idiv r8
    40 00000044 428914A3                mov dword [rbx+4*r12], edx
    41 00000048 49FFC4                  inc r12
    42 0000004B EBDC                    jmp .for
    43                                 .end:
    44 0000004D 488B0424                mov rax, [rsp+.array]
    45 00000051 4C8B642410              mov r12, [rsp+.r12]
    46 00000056 488B5C2418              mov rbx, [rsp+.rbx]
    47 0000005B C9                      leave
    48 0000005C C3                      ret
    49                                 
    50                                 
    51                                 
    52                                 sort_data:
    53                                 
    54                                 
    55                                 
    56 0000005D 55                      push rbp
    57 0000005E 4889E5                  mov rbp, rsp
    58 00000061 4883EC10                sub rsp, 16
    59 00000065 4C89642408              mov [rsp + 8], r12
    60 0000006A 48893C24                mov [rsp], rdi
    61 0000006E 48FFCE                  dec rsi
    62 00000071 48C1E602                shl rsi, 2
    63 00000075 4801F7                  add rdi, rsi
    64 00000078 6631C0                 s_do: xor ax, ax
    65 0000007B 488B0C24                mov rcx, [rsp]
    66 0000007F 4839F9                 s_for: cmp rcx, rdi
    67 00000082 7D1E                    jge e_do
    68 00000084 448B6104                mov r12d, dword [rcx+4]
    69 00000088 443921                  cmp dword [rcx], r12d
    70 0000008B 7E0F                    jle e_for
    71 0000008D 443321                  xor r12d, dword [rcx]
    72 00000090 443121                  xor dword [rcx], r12d
    73 00000093 443321                  xor r12d, dword[rcx]
    74 00000096 44896104                mov dword [rcx+4], r12d
    75 0000009A 6683C801                or ax, 0x1
    76 0000009E 4883C104               e_for: add rcx, 4
    77 000000A2 EBD9                    jmp s_for
    78 000000A4 660FBAE000             e_do: bt ax, 0
    79 000000A9 72CB                    jc s_do
    80 000000AB 4C8B642408              mov r12, [rsp + 8]
    81 000000B0 C9                      leave
    82 000000B1 C3                      ret
    83                                 
    84                                 
    85                                 
    86                                 main:
    87 000000B2 55                      push rbp
    88 000000B3 4889E5                  mov rbp, rsp
    89 000000B6 4883EC10                sub rsp, 16
    90 000000BA 4889F1                  mov rcx, rsi
    91 000000BD 4883C108                add rcx, 8
    92 000000C1 488B39                  mov rdi, [rcx]
    93 000000C4 E8(F6FFFFFF)            call atol
    94 000000C9 50                      push rax
    95 000000CA 4889C7                  mov rdi, rax
    96 000000CD E829FFFFFF              call create_data
    97 000000D2 50                      push rax
    98                                 
    99 000000D3 488B3C24                mov rdi, [rsp]
   100 000000D7 488B742408              mov rsi, [rsp+8]
   101 000000DC E877FFFFFF              call sort_data
   102 000000E1 C9                      leave
   103 000000E2 C3                      ret
   104                                 
