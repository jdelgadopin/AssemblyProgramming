     1                                 %line 1+1 ex01_bubble.asm
     2                                 [section .data]
     3 00000000 25642000               pr_write db "%d ",0
     4 00000004 0A00                   linefd db 0xa,0
     5                                 
     6                                 [section .text]
     7                                 [global main]
     8                                 
     9                                 [extern printf]
    10                                 %line 8+0 ex01_bubble.asm
    11                                 [extern rand]
    12                                 [extern malloc]
    13                                 [extern atol]
    14                                 %line 9+1 ex01_bubble.asm
    15                                 
    16                                 
    17                                 
    18                                 create_data:
    19                                 
    20                                 
    21                                 .array equ 0
    22                                 .size equ 8
    23                                 .r12 equ 16
    24                                 .rbx equ 24
    25 00000000 55                      push rbp
    26 00000001 4889E5                  mov rbp, rsp
    27 00000004 4883EC20                sub rsp, 32
    28 00000008 48895C2418              mov [rsp+.rbx], rbx
    29 0000000D 4C89642410              mov [rsp+.r12], r12
    30 00000012 48897C2408              mov [rsp+.size], rdi
    31 00000017 48C1E702                shl rdi, 2
    32 0000001B E8(F6FFFFFF)            call malloc
    33 00000020 48890424                mov [rsp+.array], rax
    34 00000024 488B1C24                mov rbx, [rsp+.array]
    35 00000028 4D31E4                  xor r12, r12
    36                                 .for:
    37 0000002B 4C3B642408              cmp r12, [rsp+.size]
    38 00000030 7D19                    jge .end
    39 00000032 E8(F6FFFFFF)            call rand
    40 00000037 4831D2                  xor rdx, rdx
    41 0000003A 49C7C010270000          mov r8, 10000
    42 00000041 49F7F8                  idiv r8
    43 00000044 428914A3                mov dword [rbx+4*r12], edx
    44 00000048 49FFC4                  inc r12
    45 0000004B EBDC                    jmp .for
    46                                 .end:
    47 0000004D 488B0424                mov rax, [rsp+.array]
    48 00000051 4C8B642410              mov r12, [rsp+.r12]
    49 00000056 488B5C2418              mov rbx, [rsp+.rbx]
    50 0000005B C9                      leave
    51 0000005C C3                      ret
    52                                 
    53                                 
    54                                 
    55                                 sort_data:
    56                                 
    57                                 
    58                                 
    59 0000005D 55                      push rbp
    60 0000005E 4889E5                  mov rbp, rsp
    61 00000061 4883EC10                sub rsp, 16
    62 00000065 4C89642408              mov [rsp + 8], r12
    63 0000006A 48893C24                mov [rsp], rdi
    64 0000006E 48FFCE                  dec rsi
    65 00000071 48C1E602                shl rsi, 2
    66 00000075 4801F7                  add rdi, rsi
    67 00000078 6631C0                 s_do: xor ax, ax
    68 0000007B 488B0C24                mov rcx, [rsp]
    69 0000007F 4839F9                 s_for: cmp rcx, rdi
    70 00000082 7D1E                    jge e_do
    71 00000084 448B6104                mov r12d, dword [rcx+4]
    72 00000088 443921                  cmp dword [rcx], r12d
    73 0000008B 7E0F                    jle e_for
    74 0000008D 443321                  xor r12d, dword [rcx]
    75 00000090 443121                  xor dword [rcx], r12d
    76 00000093 443321                  xor r12d, dword[rcx]
    77 00000096 44896104                mov dword [rcx+4], r12d
    78 0000009A 6683C801                or ax, 0x1
    79 0000009E 4883C104               e_for: add rcx, 4
    80 000000A2 EBD9                    jmp s_for
    81 000000A4 660FBAE000             e_do: bt ax, 0
    82 000000A9 72CB                    jc s_do
    83 000000AB 4C8B642408              mov r12, [rsp + 8]
    84 000000B0 C9                      leave
    85 000000B1 C3                      ret
    86                                 
    87                                 
    88                                 
    89                                 print_data:
    90                                 
    91                                 
    92                                 .array equ 0
    93                                 .size equ 8
    94                                 .r12 equ 16
    95 000000B2 55                      push rbp
    96 000000B3 4889E5                  mov rbp, rsp
    97 000000B6 4883EC20                sub rsp, 32
    98 000000BA 4C89642410              mov [rsp+.r12], r12
    99 000000BF 4889742408              mov [rsp+.size], rsi
   100 000000C4 48893C24                mov [rsp+.array], rdi
   101 000000C8 4D31E4                  xor r12, r12
   102                                 .for:
   103 000000CB 4C3B642408              cmp r12, [rsp+.size]
   104 000000D0 7D1A                    jge .end
   105 000000D2 488B0C24                mov rcx, [rsp+.array]
   106 000000D6 488D3C25[00000000]      lea rdi, [pr_write]
   107 000000DE 4A8B34A1                mov rsi, [rcx+4*r12]
   108 000000E2 31C0                    xor eax, eax
   109 000000E4 E8(F6FFFFFF)            call printf
   110 000000E9 49FFC4                  inc r12
   111 000000EC EBDB                    jmp .for
   112                                 .end:
   113 000000EE 488D3C25[00000000]      lea rdi, [linefd]
   114 000000F6 31C0                    xor eax, eax
   115 000000F8 E8(F6FFFFFF)            call printf
   116 000000FD 4C8B642410              mov r12, [rsp+.r12]
   117 00000102 C9                      leave
   118 00000103 C3                      ret
   119                                 
   120                                 
   121                                 
   122                                 main:
   123 00000104 55                      push rbp
   124 00000105 4889E5                  mov rbp, rsp
   125 00000108 4883EC10                sub rsp, 16
   126 0000010C 4889F1                  mov rcx, rsi
   127 0000010F 4883C108                add rcx, 8
   128 00000113 488B39                  mov rdi, [rcx]
   129 00000116 E8(F6FFFFFF)            call atol
   130 0000011B 50                      push rax
   131 0000011C 4889C7                  mov rdi, rax
   132 0000011F E8D7FEFFFF              call create_data
   133 00000124 50                      push rax
   134                                 
   135                                 
   136 00000125 488B3C24                mov rdi, [rsp]
   137 00000129 488B742408              mov rsi, [rsp+8]
   138 0000012E E87AFFFFFF              call print_data
   139                                 
   140 00000133 488B3C24                mov rdi, [rsp]
   141 00000137 488B742408              mov rsi, [rsp+8]
   142 0000013C E817FFFFFF              call sort_data
   143                                 
   144 00000141 488B3C24                mov rdi, [rsp]
   145 00000145 488B742408              mov rsi, [rsp+8]
   146 0000014A E85EFFFFFF              call print_data
   147                                 
   148 0000014F C9                      leave
   149 00000150 C3                      ret
   150                                 
