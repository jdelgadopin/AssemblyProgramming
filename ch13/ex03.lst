     1                                 %line 1+1 ex03.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 
    10                                 [section .bss]
    11 00000000 <gap>                  string_read: resb 1024
    12 00000400 <gap>                  zero: resq 1
    13 00000408 <gap>                  one: resq 1
    14                                 
    15                                 [absolute 0]
    16                                 %line 14+0 ex03.asm
    17                                 BigInt:
    18                                 %line 15+1 ex03.asm
    19                                 b_size: resq 1
    20                                 b_num: resq 1
    21                                 BigInt_size EQU $ - BigInt
    22                                 %line 17+0 ex03.asm
    23                                 [section .bss]
    24                                 %line 18+1 ex03.asm
    25                                 
    26                                 
    27                                 
    28                                 [section .data]
    29                                 
    30 00000000 00070E151C232A3138     boundaries db 0,7,14,21,28,35,42,49,56
    31                                 
    32 00000009 257300                 _inp db "%s",0
    33 0000000C 2530327500             _out db "%02u",0
    34 00000011 0A00                   _ret db 0xa,0
    35 00000013 456E7465722061206E-    _pro db "Enter a number: ",0
    36 00000013 756D6265723A2000   
    37 00000024 3D3D3D3E2000           _prn db "===> ",0
    38 0000002A 2077697468206F7665-    _ove db " with overflow",0
    39 0000002A 72666C6F7700       
    40 00000039 73756D3A2000           _sum db "sum: ",0
    41                                 
    42                                 
    43                                 
    44                                 
    45                                 [section .text]
    46                                 [global main]
    47                                 
    48                                 [extern scanf]
    49                                 %line 39+0 ex03.asm
    50                                 [extern printf]
    51                                 [extern malloc]
    52                                 [extern free]
    53                                 [extern atol]
    54                                 %line 40+1 ex03.asm
    55                                 
    56                                 
    57                                 
    58                                 convert_string_to_num:
    59                                 
    60                                 
    61                                 
    62 00000000 55                      push rbp
    63 00000001 4889E5                  mov rbp, rsp
    64 00000004 53                      push rbx
    65 00000005 4154                    push r12
    66 00000007 4155                    push r13
    67 00000009 4156                    push r14
    68                                 
    69 0000000B 4889FB                  mov rbx, rdi
    70                                 
    71 0000000E 48C7C710000000          mov rdi, BigInt_size
    72 00000015 E8(F6FFFFFF)            call malloc
    73 0000001A 4989C4                  mov r12, rax
    74                                 
    75 0000001D 4831C0                  xor rax, rax
    76                                 .next_zero:
    77 00000020 803C0300                cmp byte [rbx+rax], 0
    78 00000024 7409                    je .compute_size
    79 00000026 803C0330                cmp byte [rbx+rax], 0x30
    80 0000002A 7503                    jne .compute_size
    81 0000002C 48FFC0                  inc rax
    82 0000002F EBED                    jmp .next_zero
    83                                 
    84                                 .compute_size:
    85 00000031 4801C3                  add rbx, rax
    86 00000034 4831C0                  xor rax, rax
    87                                 .next_char:
    88 00000037 803C0300                cmp byte [rbx+rax], 0
    89 0000003B 7403                    je .size
    90 0000003D 48FFC0                  inc rax
    91 00000040 EBF3                    jmp .next_char
    92                                 .size:
    93 00000042 4989C6                  mov r14, rax
    94 00000045 48C7C112000000          mov rcx, 18
    95 0000004C 4831D2                  xor rdx, rdx
    96 0000004F 48F7F1                  div rcx
    97 00000052 4883FA00                cmp rdx, 0
    98 00000056 7401                    je .save
    99 00000058 48FFC0                  inc rax
   100                                 .save:
   101 0000005B 4883F800                cmp rax, 0
   102 0000005F 750B                    jne .not_zero
   103 00000061 4C8B2425[00000000]      mov r12, [zero]
   104 00000069 E9AC000000              jmp .end_conversion
   105                                 .not_zero:
   106 0000006E 4989D5                  mov r13, rdx
   107 00000071 49890424                mov qword [r12+b_size], rax
   108 00000075 48C1E003                shl rax, 3
   109 00000079 4889C7                  mov rdi, rax
   110 0000007C E8(F6FFFFFF)            call malloc
   111 00000081 4989442408              mov qword [r12+b_num], rax
   112                                 
   113                                 
   114                                 
   115                                 
   116                                 
   117                                 
   118                                 
   119                                 
   120                                 [section .bss]
   121 00000410 <gap>                  .temp: resb 19
   122                                 
   123                                 [section .text]
   124                                 
   125 00000086 4D31C0                  xor r8, r8
   126 00000089 4983EE12                sub r14, 18
   127                                 .next_qword:
   128 0000008D 4983FE00                cmp r14, 0
   129 00000091 7C4A                    jl .done
   130                                 
   131 00000093 4150                    push r8
   132 00000095 4A8D3433                lea rsi, [rbx+r14]
   133 00000099 488D3C25[00000000]      lea rdi, [.temp]
   134 000000A1 48C7C112000000          mov rcx, 18
   135 000000A8 F3A4                    rep movsb
   136 000000AA 4158                    pop r8
   137 000000AC C60425[12000000]00      mov byte [.temp+18], 0
   138                                 
   139 000000B4 4150                    push r8
   140 000000B6 488D3C25[00000000]      lea rdi, [.temp]
   141 000000BE E8(F6FFFFFF)            call atol
   142 000000C3 4889C7                  mov rdi, rax
   143 000000C6 E85B000000              call convert_num_to_num
   144 000000CB 4158                    pop r8
   145 000000CD 4D8B4C2408              mov r9, [r12+b_num]
   146 000000D2 4B8904C1                mov qword [r9+8*r8], rax
   147                                 
   148 000000D6 49FFC0                  inc r8
   149 000000D9 4983EE12                sub r14, 18
   150 000000DD EBAC                    jmp .next_qword
   151                                 .done:
   152                                 
   153 000000DF 4983FD00                cmp r13, 0
   154 000000E3 7438                    je .end_conversion
   155 000000E5 4150                    push r8
   156 000000E7 488D33                  lea rsi, [rbx]
   157 000000EA 488D3C25[00000000]      lea rdi, [.temp]
   158 000000F2 4C89E9                  mov rcx, r13
   159 000000F5 F3A4                    rep movsb
   160 000000F7 41C685[00000000]00      mov byte [.temp+r13], 0
   161 000000FF 488D3C25[00000000]      lea rdi, [.temp]
   162 00000107 E8(F6FFFFFF)            call atol
   163 0000010C 4889C7                  mov rdi, rax
   164 0000010F E812000000              call convert_num_to_num
   165 00000114 4158                    pop r8
   166 00000116 4D8B4C2408              mov r9, [r12+b_num]
   167 0000011B 4B8904C1                mov qword [r9+8*r8], rax
   168                                 .end_conversion:
   169 0000011F 4C89E0                  mov rax, r12
   170 00000122 415E                    pop r14
   171 00000124 415D                    pop r13
   172 00000126 415C                    pop r12
   173 00000128 5B                      pop rbx
   174 00000129 C9                      leave
   175 0000012A C3                      ret
   176                                 
   177                                 
   178                                 
   179                                 convert_num_to_num:
   180                                 
   181                                 
   182                                 
   183                                 
   184 0000012B 55                      push rbp
   185 0000012C 4889E5                  mov rbp, rsp
   186 0000012F 53                      push rbx
   187 00000130 4154                    push r12
   188                                 
   189 00000132 4889F8                  mov rax, rdi
   190 00000135 4D31E4                  xor r12, r12
   191 00000138 4831DB                  xor rbx, rbx
   192                                 .next:
   193 0000013B 4883F800                cmp rax, 0
   194 0000013F 7427                    je .done
   195 00000141 4883FB09                cmp rbx, 9
   196 00000145 7D21                    jge .done
   197 00000147 48C7C164000000          mov rcx, 100
   198 0000014E 4831D2                  xor rdx, rdx
   199 00000151 48F7F1                  div rcx
   200                                 
   201                                 
   202 00000154 480FB68B[00000000]      movzx rcx, byte [boundaries+rbx]
   203 0000015C 49D3CC                  ror r12, cl
   204 0000015F 4108D4                  or r12b,dl
   205 00000162 49D3C4                  rol r12, cl
   206 00000165 48FFC3                  inc rbx
   207 00000168 EBCF                    jmp .next
   208                                 .done:
   209 0000016A 4C89E0                  mov rax, r12
   210                                 .end:
   211 0000016D 415C                    pop r12
   212 0000016F 5B                      pop rbx
   213 00000170 C9                      leave
   214 00000171 C3                      ret
   215                                 
   216                                 
   217                                 
   218                                 print_num:
   219                                 
   220 00000172 55                      push rbp
   221 00000173 4889E5                  mov rbp, rsp
   222 00000176 53                      push rbx
   223 00000177 4154                    push r12
   224 00000179 4155                    push r13
   225                                 
   226 0000017B 4989FC                  mov r12, rdi
   227 0000017E 4989F5                  mov r13, rsi
   228 00000181 48C7C308000000          mov rbx, 8
   229                                 .next:
   230 00000188 4883FB00                cmp rbx, 0
   231 0000018C 7C41                    jl .done
   232 0000018E 480FB68B[00000000]      movzx rcx, byte [boundaries+rbx]
   233 00000196 49D3CC                  ror r12, cl
   234 00000199 490FB6F4                movzx rsi, r12b
   235 0000019D 480FBAF607              btr rsi, 7
   236 000001A2 4883FE00                cmp rsi, 0
   237 000001A6 7504                    jne .go_pr
   238 000001A8 4983FD00                cmp r13, 0
   239 000001AC 7411                    je .go_no
   240                                 .go_pr:
   241 000001AE 4983CD01                or r13, 0x1
   242 000001B2 488D3C25[00000000]      lea rdi, [_out]
   243 000001BA 31C0                    xor eax, eax
   244 000001BC E8(F6FFFFFF)            call printf
   245                                 .go_no:
   246 000001C1 480FB68B[00000000]      movzx rcx, byte [boundaries+rbx]
   247 000001C9 49D3C4                  rol r12, cl
   248 000001CC 48FFCB                  dec rbx
   249 000001CF EBB5                    jmp .next
   250                                 .done:
   251 000001D1 4C89E8                  mov rax, r13
   252 000001D4 415D                    pop r13
   253 000001D6 415C                    pop r12
   254 000001D8 5B                      pop rbx
   255 000001D9 C9                      leave
   256 000001DA C3                      ret
   257                                 
   258                                 
   259                                 
   260                                 print_BigInt:
   261                                 
   262                                 
   263 000001DB 55                      push rbp
   264 000001DC 4889E5                  mov rbp, rsp
   265 000001DF 53                      push rbx
   266 000001E0 4154                    push r12
   267 000001E2 4155                    push r13
   268 000001E4 57                      push rdi
   269                                 
   270 000001E5 4C8B27                  mov r12, [rdi+b_size]
   271 000001E8 4C8B6F08                mov r13, [rdi+b_num]
   272                                 
   273                                 [section .data]
   274 0000003F 303000                 ._zero: db "00",0
   275 00000042 2564202D2D2000         ._size: db "%d -- ",0
   276                                 [section .text]
   277 000001EC 488D3C25[00000000]      lea rdi, [._size]
   278 000001F4 4C89E6                  mov rsi, r12
   279 000001F7 31C0                    xor eax, eax
   280 000001F9 E8(F6FFFFFF)            call printf
   281                                 
   282 000001FE 4831DB                  xor rbx, rbx
   283                                 
   284 00000201 49FFCC                  dec r12
   285                                 .next_qword:
   286 00000204 4983FC00                cmp r12, 0
   287 00000208 7C13                    jl .end_qword
   288 0000020A 4B8B7CE500              mov rdi, qword [r13+8*r12]
   289 0000020F 4889DE                  mov rsi, rbx
   290 00000212 E856FFFFFF              call print_num
   291 00000217 4889C3                  mov rbx, rax
   292 0000021A 49FFCC                  dec r12
   293 0000021D EBE3                    jmp .next_qword
   294                                 .end_qword:
   295 0000021F 4883FB00                cmp rbx, 0
   296 00000223 750D                    jne .end
   297 00000225 488D3C25[00000000]      lea rdi, [._zero]
   298 0000022D 31C0                    xor eax, eax
   299 0000022F E8(F6FFFFFF)            call printf
   300                                 .end:
   301 00000234 58                      pop rax
   302 00000235 415D                    pop r13
   303 00000237 415C                    pop r12
   304 00000239 5B                      pop rbx
   305 0000023A C9                      leave
   306 0000023B C3                      ret
   307                                 
   308                                 
   309                                 
   310                                 equal:
   311                                 
   312                                 
   313 0000023C 55                      push rbp
   314 0000023D 4889E5                  mov rbp, rsp
   315 00000240 53                      push rbx
   316 00000241 4154                    push r12
   317 00000243 4155                    push r13
   318 00000245 4156                    push r14
   319 00000247 4157                    push r15
   320 00000249 4831C0                  xor rax, rax
   321 0000024C 4C8B27                  mov r12, [rdi+b_size]
   322 0000024F 4C8B6F08                mov r13, [rdi+b_num]
   323 00000253 4C8B36                  mov r14, [rsi+b_size]
   324 00000256 4C8B7E08                mov r15, [rsi+b_num]
   325 0000025A 4D39F4                  cmp r12, r14
   326 0000025D 751D                    jne .end
   327 0000025F 4831DB                  xor rbx, rbx
   328                                 .next_qword:
   329 00000262 4C39E3                  cmp rbx, r12
   330 00000265 7D0E                    jge .end_qword
   331 00000267 4D8B44DD00              mov r8, qword [r13+8*rbx]
   332 0000026C 4D3B04DF                cmp r8, qword [r15+8*rbx]
   333 00000270 750A                    jne .end
   334 00000272 48FFC3                  inc rbx
   335 00000275 EBE9                    jmp .next_qword
   336                                 .end_qword:
   337 00000277 48C7C001000000          mov rax, 0x1
   338                                 .end:
   339 0000027E 415F                    pop r15
   340 00000280 415E                    pop r14
   341 00000282 415D                    pop r13
   342 00000284 415C                    pop r12
   343 00000286 5B                      pop rbx
   344 00000287 C9                      leave
   345 00000288 C3                      ret
   346                                 
   347                                 
   348                                 
   349                                 prod_BigInt:
   350                                 
   351                                 
   352 00000289 55                      push rbp
   353 0000028A 4889E5                  mov rbp, rsp
   354 0000028D 53                      push rbx
   355 0000028E 4154                    push r12
   356 00000290 4155                    push r13
   357 00000292 4156                    push r14
   358 00000294 4157                    push r15
   359                                 
   360                                 
   361 00000296 E8A1020000              call order
   362                                 
   363 0000029B 4989C5                  mov r13, rax
   364 0000029E 4C8B20                  mov r12, [rax+b_size]
   365 000002A1 4989D7                  mov r15, rdx
   366 000002A4 4C8B32                  mov r14, [rdx+b_size]
   367                                 .go_on:
   368                                 
   369                                 
   370                                 
   371                                 [section .data]
   372 00000049 0100000000000000       .result: dq 1
   373                                 
   374                                 [section .text]
   375                                 
   376 000002A7 48C7C710000000          mov rdi, BigInt_size
   377 000002AE E8(F6FFFFFF)            call malloc
   378 000002B3 48890425[00000000]      mov [.result], rax
   379 000002BB 4C8B0425[00000000]      mov r8, [.result]
   380 000002C3 49C70001000000          mov qword [r8+b_size], 0x1
   381 000002CA 48C7C708000000          mov rdi, 8
   382 000002D1 E8(F6FFFFFF)            call malloc
   383 000002D6 4C8B0425[00000000]      mov r8, [.result]
   384 000002DE 49894008                mov qword [r8+b_num], rax
   385 000002E2 48C70000000000          mov qword [rax], 0x0
   386                                 
   387 000002E9 48C7C710000000          mov rdi, BigInt_size
   388 000002F0 E8(F6FFFFFF)            call malloc
   389 000002F5 4889C3                  mov rbx, rax
   390 000002F8 48C70301000000          mov qword [rbx+b_size], 0x1
   391 000002FF 48C7C708000000          mov rdi, 8
   392 00000306 E8(F6FFFFFF)            call malloc
   393 0000030B 48894308                mov qword [rbx+b_num], rax
   394 0000030F 48C70000000000          mov qword [rax], 0x0
   395                                 
   396                                 .next:
   397                                 
   398 00000316 4889DF                  mov rdi, rbx
   399 00000319 4C89EE                  mov rsi, r13
   400 0000031C E816FFFFFF              call equal
   401 00000321 4883F801                cmp rax, 1
   402 00000325 7444                    je .stop
   403                                 
   404                                 
   405 00000327 488B3C25[00000000]      mov rdi, qword [.result]
   406 0000032F 4C89FE                  mov rsi, r15
   407 00000332 E84C000000              call add_BigInt
   408                                 
   409 00000337 50                      push rax
   410 00000338 488B3C25[00000000]      mov rdi, qword [.result]
   411 00000340 E857020000              call free_BigInt
   412 00000345 58                      pop rax
   413 00000346 48890425[00000000]      mov qword [.result], rax
   414                                 
   415                                 
   416 0000034E 4889DF                  mov rdi, rbx
   417 00000351 488B3425[00000000]      mov rsi, [one]
   418 00000359 E825000000              call add_BigInt
   419                                 
   420 0000035E 50                      push rax
   421 0000035F 4889DF                  mov rdi, rbx
   422 00000362 E835020000              call free_BigInt
   423 00000367 58                      pop rax
   424 00000368 4889C3                  mov rbx, rax
   425                                 
   426 0000036B EBA7                    jmp .next
   427                                 .stop:
   428                                 
   429 0000036D 4889DF                  mov rdi, rbx
   430 00000370 E827020000              call free_BigInt
   431                                 
   432 00000375 488B0425[00000000]      mov rax, [.result]
   433 0000037D 415F                    pop r15
   434 0000037F 415E                    pop r14
   435 00000381 415D                    pop r13
   436 00000383 415C                    pop r12
   437 00000385 5B                      pop rbx
   438 00000386 C9                      leave
   439 00000387 C3                      ret
   440                                 
   441                                 
   442                                 
   443                                 add_BigInt:
   444                                 
   445                                 
   446 00000388 55                      push rbp
   447 00000389 4889E5                  mov rbp, rsp
   448 0000038C 53                      push rbx
   449 0000038D 4154                    push r12
   450 0000038F 4155                    push r13
   451 00000391 4156                    push r14
   452 00000393 4157                    push r15
   453                                 
   454 00000395 4C8B27                  mov r12, [rdi+b_size]
   455 00000398 4C8B6F08                mov r13, [rdi+b_num]
   456 0000039C 4C8B36                  mov r14, [rsi+b_size]
   457 0000039F 4C8B7E08                mov r15, [rsi+b_num]
   458 000003A3 4D39E6                  cmp r14, r12
   459 000003A6 7D0C                    jge .go_on
   460 000003A8 4C8B26                  mov r12, [rsi+b_size]
   461 000003AB 4C8B6E08                mov r13, [rsi+b_num]
   462 000003AF 4C8B37                  mov r14, [rdi+b_size]
   463 000003B2 4C8B7F08                mov r15, [rdi+b_num]
   464                                 .go_on:
   465                                 
   466                                 
   467                                 
   468                                 [section .data]
   469 00000051 0100000000000000       .result: dq 1
   470                                 
   471                                 [section .text]
   472                                 
   473                                 
   474 000003B6 48C7C710000000          mov rdi, BigInt_size
   475 000003BD E8(F6FFFFFF)            call malloc
   476 000003C2 48890425[00000000]      mov [.result], rax
   477 000003CA 4889C3                  mov rbx, rax
   478 000003CD 4C89F7                  mov rdi, r14
   479 000003D0 48893B                  mov qword [rbx+b_size], rdi
   480 000003D3 48C1E703                shl rdi, 3
   481 000003D7 E8(F6FFFFFF)            call malloc
   482 000003DC 48894308                mov qword [rbx+b_num], rax
   483                                 
   484                                 
   485 000003E0 4831D2                  xor rdx, rdx
   486 000003E3 4831DB                  xor rbx, rbx
   487                                 .next_qword_1stpass:
   488 000003E6 4C39E3                  cmp rbx, r12
   489 000003E9 7D21                    jge .end_qword_1stpass
   490 000003EB 498B7CDD00              mov rdi, qword [r13+8*rbx]
   491 000003F0 498B34DF                mov rsi, qword [r15+8*rbx]
   492                                 
   493 000003F4 E8A1000000              call add_num
   494 000003F9 488B0C25[00000000]      mov rcx, [.result]
   495 00000401 488B4908                mov rcx, [rcx+b_num]
   496 00000405 488904D9                mov qword [rcx+8*rbx], rax
   497 00000409 48FFC3                  inc rbx
   498 0000040C EBD6                    jmp .next_qword_1stpass
   499                                 .end_qword_1stpass:
   500                                 
   501                                 .next_qword_2ndpass:
   502 0000040E 4C39F3                  cmp rbx, r14
   503 00000411 7D23                    jge .end_qword_2ndpass
   504 00000413 48C7C700000000          mov rdi, 0x0
   505 0000041A 498B34DF                mov rsi, qword [r15+8*rbx]
   506                                 
   507 0000041E E877000000              call add_num
   508 00000423 488B0C25[00000000]      mov rcx, [.result]
   509 0000042B 488B4908                mov rcx, [rcx+b_num]
   510 0000042F 488904D9                mov qword [rcx+8*rbx], rax
   511 00000433 48FFC3                  inc rbx
   512 00000436 EBD4                    jmp .next_qword_2ndpass
   513                                 .end_qword_2ndpass:
   514                                 
   515 00000438 4883FA00                cmp rdx, 0
   516 0000043C 744C                    je .end
   517 0000043E 4C8B2425[00000000]      mov r12, [.result]
   518 00000446 4D8B6C2408              mov r13, [r12+b_num]
   519 0000044B 4C89F1                  mov rcx, r14
   520 0000044E 48FFC1                  inc rcx
   521 00000451 49890C24                mov qword [r12+b_size], rcx
   522 00000455 48C1E103                shl rcx, 3
   523 00000459 4889CF                  mov rdi, rcx
   524 0000045C E8(F6FFFFFF)            call malloc
   525 00000461 4989442408              mov qword [r12+b_num], rax
   526 00000466 4831DB                  xor rbx, rbx
   527                                 .next_qword:
   528 00000469 4C39F3                  cmp rbx, r14
   529 0000046C 7D0C                    jge .end_qword
   530 0000046E 498B7CDD00              mov rdi, qword [r13+8*rbx]
   531 00000473 48893CD8                mov qword [rax+8*rbx], rdi
   532 00000477 48FFC3                  inc rbx
   533 0000047A EBEB                    jmp .next_qword
   534                                 .end_qword:
   535 0000047C 4AC704F001000000        mov qword [rax+8*r14], 0x1
   536 00000484 4C89EF                  mov rdi, r13
   537 00000487 E8(F6FFFFFF)            call free
   538                                 .end:
   539 0000048C 488B0425[00000000]      mov rax, [.result]
   540 00000494 415F                    pop r15
   541 00000496 415E                    pop r14
   542 00000498 415D                    pop r13
   543 0000049A 415C                    pop r12
   544 0000049C 5B                      pop rbx
   545 0000049D C9                      leave
   546 0000049E C3                      ret
   547                                 
   548                                 
   549                                 
   550                                 add_num:
   551                                 
   552                                 
   553 0000049F 55                      push rbp
   554 000004A0 4889E5                  mov rbp, rsp
   555 000004A3 53                      push rbx
   556 000004A4 4154                    push r12
   557 000004A6 4155                    push r13
   558 000004A8 4156                    push r14
   559 000004AA 4157                    push r15
   560                                 
   561                                 
   562                                 
   563                                 
   564                                 
   565                                 
   566                                 [section .data]
   567 00000059 00                     .carry: db 0
   568                                 
   569                                 [section .text]
   570                                 
   571 000004AC 4D31C0                  xor r8, r8
   572 000004AF 4989FC                  mov r12, rdi
   573 000004B2 4989F5                  mov r13, rsi
   574 000004B5 881425[00000000]        mov byte [.carry], dl
   575                                 
   576 000004BC 4831DB                  xor rbx, rbx
   577                                 .next:
   578 000004BF 4883FB09                cmp rbx, 9
   579 000004C3 7D63                    jge .done
   580 000004C5 480FB68B[00000000]      movzx rcx, byte [boundaries+rbx]
   581 000004CD 49D3CC                  ror r12, cl
   582 000004D0 4D0FB6F4                movzx r14, r12b
   583 000004D4 490FBAF607              btr r14, 7
   584 000004D9 49D3C4                  rol r12, cl
   585 000004DC 49D3CD                  ror r13, cl
   586 000004DF 4D0FB6FD                movzx r15, r13b
   587 000004E3 490FBAF707              btr r15, 7
   588 000004E8 49D3C5                  rol r13, cl
   589 000004EB 4500FE                  add r14b, r15b
   590 000004EE 480FB61425[00000000]      movzx rdx, byte [.carry]
   591 000004F7 4100D6                  add r14b, dl
   592 000004FA 49C7C164000000          mov r9, 100
   593 00000501 4C89F0                  mov rax, r14
   594 00000504 4831D2                  xor rdx, rdx
   595 00000507 49F7F1                  div r9
   596 0000050A 880425[00000000]        mov byte [.carry], al
   597 00000511 4989D6                  mov r14, rdx
   598 00000514 49D3C8                  ror r8, cl
   599 00000517 49C1E807                shr r8, 7
   600 0000051B 49C1E007                shl r8, 7
   601 0000051F 4508F0                  or r8b, r14b
   602 00000522 49D3C0                  rol r8, cl
   603 00000525 48FFC3                  inc rbx
   604 00000528 EB93                    jmp .next
   605                                 .done:
   606 0000052A 4C89C0                  mov rax, r8
   607 0000052D 480FB61425[00000000]      movzx rdx, byte [.carry]
   608                                 .end:
   609 00000536 415F                    pop r15
   610 00000538 415E                    pop r14
   611 0000053A 415D                    pop r13
   612 0000053C 415C                    pop r12
   613 0000053E 5B                      pop rbx
   614 0000053F C9                      leave
   615 00000540 C3                      ret
   616                                 
   617                                 
   618                                 
   619                                 order:
   620                                 
   621                                 
   622 00000541 55                      push rbp
   623 00000542 4889E5                  mov rbp, rsp
   624 00000545 53                      push rbx
   625 00000546 4154                    push r12
   626 00000548 4155                    push r13
   627 0000054A 4156                    push r14
   628 0000054C 4157                    push r15
   629                                 
   630 0000054E 4889F8                  mov rax, rdi
   631 00000551 4C8B27                  mov r12, [rdi+b_size]
   632 00000554 4C8B6F08                mov r13, [rdi+b_num]
   633 00000558 4889F2                  mov rdx, rsi
   634 0000055B 4C8B36                  mov r14, [rsi+b_size]
   635 0000055E 4C8B7E08                mov r15, [rsi+b_num]
   636 00000562 4D39F4                  cmp r12, r14
   637 00000565 7C2D                    jl .end
   638 00000567 4D39F4                  cmp r12, r14
   639 0000056A 7F22                    jg .switch
   640                                 
   641 0000056C 4C89E3                  mov rbx, r12
   642 0000056F 48FFCB                  dec rbx
   643                                 .next_qword:
   644 00000572 4883FB00                cmp rbx, 0
   645 00000576 7C16                    jl .end_qword
   646 00000578 4D8B44DD00              mov r8, qword [r13+8*rbx]
   647 0000057D 4D8B0CDF                mov r9, qword [r15+8*rbx]
   648 00000581 4D39C8                  cmp r8, r9
   649 00000584 720E                    jb .end
   650 00000586 4D39C8                  cmp r8, r9
   651 00000589 7703                    ja .switch
   652 0000058B 48FFCB                  dec rbx
   653 0000058E EBE0                    jmp .next_qword
   654                                 .end_qword:
   655                                 
   656                                 .switch:
   657 00000590 4889F0                  mov rax, rsi
   658 00000593 4889FA                  mov rdx, rdi
   659                                 .end:
   660 00000596 415F                    pop r15
   661 00000598 415E                    pop r14
   662 0000059A 415D                    pop r13
   663 0000059C 415C                    pop r12
   664 0000059E 5B                      pop rbx
   665 0000059F C9                      leave
   666 000005A0 C3                      ret
   667                                 
   668                                 
   669                                 
   670                                 free_BigInt:
   671                                 
   672                                 
   673 000005A1 55                      push rbp
   674 000005A2 4889E5                  mov rbp, rsp
   675 000005A5 53                      push rbx
   676                                 
   677 000005A6 4889FB                  mov rbx, rdi
   678 000005A9 488B7B08                mov rdi, [rbx+b_num]
   679 000005AD E8(F6FFFFFF)            call free
   680 000005B2 4889DF                  mov rdi, rbx
   681 000005B5 E8(F6FFFFFF)            call free
   682                                 
   683 000005BA 5B                      pop rbx
   684 000005BB C9                      leave
   685 000005BC C3                      ret
   686                                 
   687                                 
   688                                 
   689                                 
   690                                 main:
   691 000005BD 55                      push rbp
   692 000005BE 4889E5                  mov rbp, rsp
   693 000005C1 53                      push rbx
   694 000005C2 4154                    push r12
   695 000005C4 4155                    push r13
   696                                 
   697                                 
   698 000005C6 48C7C710000000          mov rdi, BigInt_size
   699 000005CD E8(F6FFFFFF)            call malloc
   700 000005D2 48890425[00000000]      mov qword [zero], rax
   701 000005DA 4989C4                  mov r12, rax
   702 000005DD 49C7042401000000        mov qword [r12+b_size], 0x1
   703 000005E5 48C7C708000000          mov rdi, 8
   704 000005EC E8(F6FFFFFF)            call malloc
   705 000005F1 4989442408              mov qword [r12+b_num], rax
   706 000005F6 48C70000000000          mov qword [rax], 0x0
   707                                 
   708                                 
   709 000005FD 48C7C710000000          mov rdi, BigInt_size
   710 00000604 E8(F6FFFFFF)            call malloc
   711 00000609 48890425[00000000]      mov qword [one], rax
   712 00000611 4989C4                  mov r12, rax
   713 00000614 49C7042401000000        mov qword [r12+b_size], 0x1
   714 0000061C 48C7C708000000          mov rdi, 8
   715 00000623 E8(F6FFFFFF)            call malloc
   716 00000628 4989442408              mov qword [r12+b_num], rax
   717 0000062D 48C70001000000          mov qword [rax], 0x1
   718                                 
   719                                 
   720 00000634 488D3C25[00000000]      lea rdi, [_pro]
   721 0000063C 31C0                    xor eax, eax
   722 0000063E E8(F6FFFFFF)            call printf
   723 00000643 488D3C25[00000000]      lea rdi, [_inp]
   724 0000064B 488D3425[00000000]      lea rsi, [string_read]
   725 00000653 31C0                    xor eax, eax
   726 00000655 E8(F6FFFFFF)            call scanf
   727 0000065A 488D3C25[00000000]      lea rdi, [string_read]
   728 00000662 E894F9FFFF              call convert_string_to_num
   729 00000667 4989C4                  mov r12, rax
   730                                 
   731                                 
   732                                 
   733                                 [section .data]
   734 0000005A 0100000000000000       .result: dq 1
   735                                 [section .text]
   736                                 
   737 0000066A 48C7C710000000          mov rdi, BigInt_size
   738 00000671 E8(F6FFFFFF)            call malloc
   739 00000676 48890425[00000000]      mov qword [.result], rax
   740 0000067E 4989C5                  mov r13, rax
   741 00000681 49C7450001000000        mov qword [r13+b_size], 0x1
   742 00000689 48C7C708000000          mov rdi, 8
   743 00000690 E8(F6FFFFFF)            call malloc
   744 00000695 49894508                mov qword [r13+b_num], rax
   745 00000699 48C70001000000          mov qword [rax], 0x1
   746                                 
   747 000006A0 48C7C710000000          mov rdi, BigInt_size
   748 000006A7 E8(F6FFFFFF)            call malloc
   749 000006AC 4889C3                  mov rbx, rax
   750 000006AF 48C70301000000          mov qword [rbx+b_size], 0x1
   751 000006B6 48C7C708000000          mov rdi, 8
   752 000006BD E8(F6FFFFFF)            call malloc
   753 000006C2 48894308                mov qword [rbx+b_num], rax
   754 000006C6 48C70001000000          mov qword [rax], 0x1
   755                                 
   756                                 
   757                                 .next:
   758 000006CD 4889DF                  mov rdi, rbx
   759 000006D0 4C89E6                  mov rsi, r12
   760 000006D3 E85FFBFFFF              call equal
   761 000006D8 4883F801                cmp rax, 0x1
   762 000006DC 7444                    je .stop
   763                                 
   764                                 
   765 000006DE 488B3C25[00000000]      mov rdi, qword [.result]
   766 000006E6 4889DE                  mov rsi, rbx
   767 000006E9 E896FBFFFF              call prod_BigInt
   768                                 
   769 000006EE 50                      push rax
   770 000006EF 488B3C25[00000000]      mov rdi, qword [.result]
   771 000006F7 E8A0FEFFFF              call free_BigInt
   772 000006FC 58                      pop rax
   773 000006FD 48890425[00000000]      mov qword [.result], rax
   774                                 
   775                                 
   776 00000705 4889DF                  mov rdi, rbx
   777 00000708 488B3425[00000000]      mov rsi, [one]
   778 00000710 E86EFCFFFF              call add_BigInt
   779                                 
   780 00000715 50                      push rax
   781 00000716 4889DF                  mov rdi, rbx
   782 00000719 E87EFEFFFF              call free_BigInt
   783 0000071E 58                      pop rax
   784 0000071F 4889C3                  mov rbx, rax
   785                                 
   786                                 
   787 00000722 EBA7                    jmp .next
   788                                 .stop:
   789                                 
   790                                 
   791 00000724 4C89E7                  mov rdi, r12
   792 00000727 488B3425[00000000]      mov rsi, qword [.result]
   793 0000072F E850FBFFFF              call prod_BigInt
   794                                 
   795 00000734 50                      push rax
   796 00000735 488B3C25[00000000]      mov rdi, qword [.result]
   797 0000073D E85AFEFFFF              call free_BigInt
   798 00000742 58                      pop rax
   799 00000743 48890425[00000000]      mov qword [.result], rax
   800                                 
   801                                 
   802                                 
   803                                 
   804 0000074B 488D3C25[00000000]      lea rdi, [_prn]
   805 00000753 31C0                    xor eax, eax
   806 00000755 E8(F6FFFFFF)            call printf
   807 0000075A 488B3C25[00000000]      mov rdi, [.result]
   808 00000762 E86FFAFFFF              call print_BigInt
   809 00000767 488D3C25[00000000]      lea rdi, [_ret]
   810 0000076F 31C0                    xor eax, eax
   811 00000771 E8(F6FFFFFF)            call printf
   812 00000776 488D3C25[00000000]      lea rdi, [_ret]
   813 0000077E 31C0                    xor eax, eax
   814 00000780 E8(F6FFFFFF)            call printf
   815                                 
   816                                 
   817 00000785 4889DF                  mov rdi, rbx
   818 00000788 E80FFEFFFF              call free_BigInt
   819 0000078D 4C89E7                  mov rdi, r12
   820 00000790 E807FEFFFF              call free_BigInt
   821 00000795 488B3C25[00000000]      mov rdi, [.result]
   822 0000079D E8FAFDFFFF              call free_BigInt
   823                                 
   824                                 
   825 000007A2 488B3C25[00000000]      mov rdi, [zero]
   826 000007AA E8EDFDFFFF              call free_BigInt
   827 000007AF 488B3C25[00000000]      mov rdi, [one]
   828 000007B7 E8E0FDFFFF              call free_BigInt
   829                                 
   830                                 
   831                                 .end:
   832 000007BC 415D                    pop r13
   833 000007BE 415C                    pop r12
   834 000007C0 5B                      pop rbx
   835 000007C1 C9                      leave
   836 000007C2 C3                      ret
   837                                 
   838                                 
